package com.hospitalManagement.HospitalManagement.securityconfig;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import static org.springframework.security.authorization.AuthenticatedAuthorizationManager.authenticated;@Configuration@EnableWebSecurity@EnableMethodSecuritypublic class SecurityConfig {    @Bean    public UserDetailsService userDetailsService() {        return  new DoctorsInfoDoctorDetailsService();    }@Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {    return  http.csrf().disable()            .httpBasic()            .and()            .authorizeHttpRequests(authorize -> authorize                   // .requestMatchers(HttpMethod.POST, "/hospital/admin/add/**").hasRole("ADMIN")                    //.requestMatchers( "/hospital/deleteCardioHead").permitAll()                    .requestMatchers( "/hospital/Welcome","/hospital/addDoctorsInfo").permitAll()                    //.requestMatchers( HttpMethod.GET,"/hospital/display/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfCardio").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfNeuro").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfNephro").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfCardio").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfNeuro").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfNephro").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AdminById/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfCardioById/**").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfCardioById/**").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNeuroById/**").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNeuroById/**").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNephroById/**").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNephroById/**").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AdminByName/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfCardioByName/**").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfCardioByName/**").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNeuroByNmae/**").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNeuroByName/**").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNephroByName/**").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNephroByName/**").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.POST,"/hospital/add/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.PUT,"/hospital/update/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.DELETE,"/hospital/delete/**").hasRole("ADMIN")                    // .anyRequest().authenticated()            )            .formLogin()            .and()            .build();}    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }     @Bean    public AuthenticationProvider authenticationProvider(){      DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();      authenticationProvider.setUserDetailsService(userDetailsService());      authenticationProvider.setPasswordEncoder(passwordEncoder());      return authenticationProvider;}}