package com.hospitalManagement.HospitalManagement.securityconfig;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.oauth2.client.registration.ClientRegistration;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;import org.springframework.security.oauth2.client.web.AuthorizationRequestRepository;import org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizationRequestRepository;import org.springframework.security.oauth2.core.AuthorizationGrantType;import org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;import org.springframework.security.web.SecurityFilterChain;@Configuration@EnableWebSecurity@EnableMethodSecuritypublic class SecurityConfig {    @Bean    public UserDetailsService userDetailsService() {        return  new DoctorsInfoDoctorDetailsService();    }@Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {    return  http.csrf().disable()            .httpBasic()            .and()            .authorizeHttpRequests(auth -> auth                    .requestMatchers( "/hospital/addDoctorsInfo").hasRole("ADMIN")               ).oauth2Login()            .and()            .authorizeHttpRequests(authorize -> authorize                            .requestMatchers( "/hospital/Welcome").permitAll()                           // .requestMatchers( "/hospital/addDoctorsInfo").hasRole("ADMIN")                           .requestMatchers( HttpMethod.GET,"/hospital/display/AllDoctors").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllAdmins").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfCardio").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfNeuro").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllHeadsOfNephro").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfCardio").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfNeuro").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AllInternsOfNephro").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AdminById/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfCardioById/**").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfCardioById/**").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNeuroById/**").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNeuroById/**").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNephroById/**").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNephroById/**").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/AdminByName/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfCardioByName/**").hasAnyRole("ADMIN","CARDIOHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfCardioByName/**").hasAnyRole("ADMIN","CARDIOHEAD","CARDIOINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNeuroByNmae/**").hasAnyRole("ADMIN","NEUROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNeuroByName/**").hasAnyRole("ADMIN","NEUROHEAD","NEUROINTERN")                            .requestMatchers( HttpMethod.GET,"/hospital/display/HeadOfNephroByName/**").hasAnyRole("ADMIN","NEPHROHEAD")                            .requestMatchers( HttpMethod.GET,"/hospital/display/InternOfNephroByName/**").hasAnyRole("ADMIN","NEPHROHEAD","NEPHROINTERN")                            .requestMatchers( HttpMethod.POST,"/hospital/add/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.PUT,"/hospital/update/**").hasRole("ADMIN")                            .requestMatchers( HttpMethod.DELETE,"/hospital/delete/**").hasRole("ADMIN")                    // .anyRequest().authenticated()            )            .formLogin()            .and()            .build();}    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }     @Bean    public AuthenticationProvider authenticationProvider(){      DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();      authenticationProvider.setUserDetailsService(userDetailsService());      authenticationProvider.setPasswordEncoder(passwordEncoder());      return authenticationProvider;}    @Bean    public ClientRegistrationRepository clientRegistrationRepository() {        return new InMemoryClientRegistrationRepository(this.gitHubClientRegistration());    }    @Bean    public AuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository() {        return new HttpSessionOAuth2AuthorizationRequestRepository();    }    @Bean    public ClientRegistration gitHubClientRegistration() {        return ClientRegistration.withRegistrationId("github")                .clientId("Iv1.0752722a8c513308")                .clientSecret("2c9ddcc93b7868b60852effa4b0a95abb99a54cb")                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)                .redirectUri("http://localhost:8787/display/AllDoctors") // Corrected redirect URI                .scope("read:user")                .authorizationUri("https://github.com/login/oauth/authorize")                .tokenUri("https://github.com/login/oauth/access_token")                .userInfoUri("https://api.github.com/user")                .userNameAttributeName("id")                .clientName("GitHub")                .build();    }}